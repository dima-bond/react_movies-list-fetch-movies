{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/api.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","imdbID","className","src","alt","href","MoviesList","movies","map","movie","key","FindMovie","addMovie","useState","query","setQuery","newMovie","setNewMovie","previewVisible","setPreviewVisible","errorVisible","setErrorVisible","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","ClassNames","value","onChange","target","onClick","fetch","then","response","json","getMovie","result","Response","App","setMovies","prevList","every","prevMovie","ReactDOM","render","document","getElementById"],"mappings":"2UAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MACAC,EAFuB,EAEvBA,KACAC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,OAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAI,qCAAgCJ,IAAvC,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAMR,QAAYQ,S,wBCHjC,IAAME,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACfC,mBAAS,IADM,mBAClCC,EADkC,KAC3BC,EAD2B,OAETF,mBAAS,IAFA,mBAElCG,EAFkC,KAExBC,EAFwB,OAGGJ,oBAAS,GAHZ,mBAGlCK,EAHkC,KAGlBC,EAHkB,OAIDN,oBAAS,GAJR,mBAIlCO,EAJkC,KAIpBC,EAJoB,KA+BzC,OACE,oCACE,0BACEnB,UAAU,aACVoB,SAXe,SAACC,GACpBA,EAAEC,iBACFZ,EAASI,GACTG,GAAkB,GAClBJ,EAAS,MASL,yBAAKb,UAAU,SACb,2BAAOA,UAAU,QAAQuB,QAAQ,eAAjC,eAIA,yBAAKvB,UAAU,WACb,2BACEwB,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZ1B,UAAW2B,IAAW,QAAS,CAAE,YAAaT,IAC9CU,MAAOhB,EACPiB,SA9BS,SAACR,GACpBR,EAASQ,EAAES,OAAOF,OAClBT,GAAgB,OA+BTD,GACC,uBAAGlB,UAAU,kBAAb,yCAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEwB,KAAK,SACLxB,UAAU,kBACV+B,QA1DZ,WACE,OCbG,SAAkBnB,GACvB,OAAOoB,MAAM,GAAD,OAHG,4BAGH,aAAiBpB,EAAjB,qBACTqB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDWpBC,CAASxB,GACbqB,MAAK,SAACI,GACmB,UAApBA,EAAOC,SACTnB,GAAgB,IAEhBJ,EAAYsB,GACZpB,GAAkB,GAClBJ,EAAS,UA+CP,iBASF,yBAAKb,UAAU,WACb,4BACEwB,KAAK,SACLxB,UAAU,qBAFZ,sBASLgB,GACC,yBAAKhB,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcc,MEtFZyB,EAAM,WAAO,IAAD,EACK5B,mBAAS,IADd,mBAChBN,EADgB,KACRmC,EADQ,KAgBvB,OACE,yBAAKxC,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWU,SAnBA,SAACI,GAChB0B,GAAU,SAACC,GAIT,OAHiBA,EACdC,OAAM,SAAAC,GAAS,OAAIA,EAAU5C,SAAWe,EAASf,WAEpCe,EAASf,OACjB,GAAN,mBAAW0C,GAAX,CAAqB3B,IAGhB2B,WCZbG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.980f8669.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot,\n  Poster,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\nimport ClassNames from 'classnames';\n\nimport { getMovie } from '../../api/api';\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [newMovie, setNewMovie] = useState({});\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [errorVisible, setErrorVisible] = useState(false);\n\n  function fetchMovie() {\n    return getMovie(query)\n      .then((result) => {\n        if (result.Response === 'False') {\n          setErrorVisible(true);\n        } else {\n          setNewMovie(result);\n          setPreviewVisible(true);\n          setQuery('');\n        }\n      });\n  }\n\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n    setErrorVisible(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addMovie(newMovie);\n    setPreviewVisible(false);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={ClassNames('input', { 'is-danger': errorVisible })}\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n          {errorVisible && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={fetchMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n      {previewVisible && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?';\n\nexport function getMovie(query) {\n  return fetch(`${BASE_URL}t=${query}&apikey=214049a0`)\n    .then(response => response.json());\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addMovie = (newMovie) => {\n    setMovies((prevList) => {\n      const isInList = prevList\n        .every(prevMovie => prevMovie.imdbID !== newMovie.imdbID);\n\n      if (isInList && newMovie.imdbID) {\n        return [...prevList, newMovie];\n      }\n\n      return prevList;\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}